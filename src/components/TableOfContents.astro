---
// src/components/TableOfContents.astro
---
<nav id="table-of-contents" class="hidden xl:block fixed top-1/2 -translate-y-1/2 right-[calc(50%+576px+2rem)] w-auto max-w-[350px] space-y-2 p-4 rounded-lg shadow-md bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border border-gray-200 dark:border-gray-700">
  <h3 class="font-bold text-lg mb-2 text-text-primary whitespace-nowrap">目录</h3>
  <ul id="toc-list" class="space-y-1">
    <!-- Links will be injected here by script -->
  </ul>
</nav>

<script>
  const updateToc = () => {
    const tocContainer = document.getElementById('table-of-contents');
    if (!tocContainer) return;

    const isPostPage = window.location.pathname.startsWith('/posts/');

    if (isPostPage) {
      const mainContent = document.querySelector('main');
      if (!mainContent) {
        tocContainer.style.display = 'none';
        return;
      }

      const headings = Array.from(mainContent.querySelectorAll('h2, h3, h4, h5, h6'));
      const tocList = document.getElementById('toc-list');

      if (headings.length > 0 && tocList) {
        tocContainer.style.display = ''; // Use default display (from class)
        tocList.innerHTML = '';

        const observer = new IntersectionObserver(
          (entries) => {
            let visibleEntries = entries.filter((e) => e.isIntersecting);
            if (visibleEntries.length > 0) {
              visibleEntries.sort((a, b) => a.target.getBoundingClientRect().top - b.target.getBoundingClientRect().top);
              const id = visibleEntries[0].target.getAttribute('id');

              document.querySelectorAll('#toc-list a').forEach((link) => {
                link.classList.remove('text-accent', 'font-bold');
                link.classList.add('text-text-secondary');
              });

              const activeLink = document.querySelector(`#toc-list a[href="#${id}"]`);
              if (activeLink) {
                activeLink.classList.remove('text-text-secondary');
                activeLink.classList.add('text-accent', 'font-bold');
              }
            }
          },
          { rootMargin: '0px 0px -80% 0px', threshold: 0 }
        );

        headings.forEach((heading, index) => {
          if (!heading.id) {
            heading.id = `heading-${index}`;
          }

          observer.observe(heading);

          const listItem = document.createElement('li');
          const link = document.createElement('a');

          link.href = `#${heading.id}`;
          link.textContent = heading.textContent;
          link.className = 'block w-full text-text-secondary hover:text-accent transition-colors duration-200 cursor-pointer whitespace-nowrap overflow-hidden text-ellipsis';

          const level = parseInt(heading.tagName.substring(1), 10);
          listItem.style.marginLeft = `${(level - 2) * 0.75}rem`;

          listItem.appendChild(link);
          tocList.appendChild(listItem);

          link.addEventListener('click', (e) => {
            e.preventDefault();
            const targetElement = document.getElementById(heading.id);
            if (targetElement) {
              targetElement.scrollIntoView({ behavior: 'smooth' });
            }
          });
        });
      } else {
        tocContainer.style.display = 'none';
      }
    } else {
      tocContainer.style.display = 'none';
    }
  };

  document.addEventListener('astro:page-load', () => {
    setTimeout(updateToc, 100);
  });
</script>
