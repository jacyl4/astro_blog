---
import { NAVIGATION_LINKS } from '@/consts';
import ThemeSwitcher from '@/components/ThemeSwitcher.astro';

const currentPathname = Astro.url.pathname;

const normalizePath = (path: string) => (path.endsWith('/') ? path : `${path}/`);

const blogContexts = ['/posts/', '/categories/', '/tags/', '/archive/'];

const isActiveLink = (href: string) => {
  const normalizedHref = normalizePath(href);
  const normalizedCurrent = normalizePath(currentPathname);

  if (normalizedHref === '/') {
    if (normalizedCurrent === '/') return true;
    return blogContexts.some((segment) => normalizedCurrent.startsWith(segment));
  }

  return normalizedCurrent.startsWith(normalizedHref);
};
---

<nav class="flex items-center justify-between px-4 md:px-8 relative">
  <!-- Mobile Menu Button -->
  <div class="md:hidden">
    <button id="mobile-menu-button" class="p-2 text-text-color" aria-label="主导航菜单" aria-expanded="false" aria-controls="mobile-menu">
      <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7"></path></svg>
    </button>
  </div>

  <!-- Desktop Menu -->
  <ul class="hidden md:flex items-center justify-start h-full gap-6">
    {NAVIGATION_LINKS.map(link => {
      const active = isActiveLink(link.href);
      return (
        <li>
          <a
            href={link.href}
            class={`nav-link h-full flex items-center font-semibold transition-colors duration-200 ${active ? 'text-accent' : 'opacity-80 hover:opacity-100'}`}
            data-nav-link={link.href}
            aria-current={active ? 'page' : undefined}
          >
            {link.text}
          </a>
        </li>
      );
    })}
  </ul>

  <div class="flex items-center">
    <ThemeSwitcher />
  </div>

  <!-- Mobile Menu -->
  <div id="mobile-menu" data-state="closed" class="absolute bottom-full left-0 w-full bg-main-content/90 md:hidden transition-all duration-300 ease-in-out">
    <ul class="flex flex-col items-center">
      {NAVIGATION_LINKS.map(link => {
        const active = isActiveLink(link.href);
        return (
          <li>
            <a
              href={link.href}
              class={`nav-link block w-full text-center py-2 px-6 font-semibold transition-colors duration-200 ${active ? 'text-accent' : 'opacity-80 hover:opacity-100'}`}
              data-nav-link={link.href}
              aria-current={active ? 'page' : undefined}
            >
              {link.text}
            </a>
          </li>
        );
      })}
    </ul>
  </div>
</nav>

<script>
  function normalize(path) {
    return path.endsWith('/') ? path : `${path}/`;
  }

  const blogContexts = ['/posts/', '/categories/', '/tags/', '/archive/'];

  function isActiveHref(targetHref, currentPath) {
    const normalizedHref = normalize(targetHref);
    const normalizedCurrent = normalize(currentPath);

    if (normalizedHref === '/') {
      if (normalizedCurrent === '/') return true;
      return blogContexts.some(segment => normalizedCurrent.startsWith(segment));
    }

    return normalizedCurrent.startsWith(normalizedHref);
  }

  function updateActiveNav() {
    const currentPath = window.location.pathname;
    const normalizedCurrent = normalize(currentPath);

    document.querySelectorAll('[data-nav-link]').forEach(anchor => {
      const href = anchor.getAttribute('data-nav-link') || '/';
      const isActive = isActiveHref(href, normalizedCurrent);

      anchor.classList.toggle('text-accent', isActive);
      anchor.classList.toggle('opacity-80', !isActive);
      anchor.classList.toggle('hover:opacity-100', !isActive);

      if (isActive) {
        anchor.setAttribute('aria-current', 'page');
      } else {
        anchor.removeAttribute('aria-current');
      }
    });
  }

  function setupMobileMenu() {
    const menuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');

    // Initialize button click handler
    if (menuButton && mobileMenu && !menuButton.dataset.menuButtonInitialized) {
      menuButton.addEventListener('click', () => {
        const isOpen = mobileMenu.getAttribute('data-state') === 'open';
        mobileMenu.setAttribute('data-state', isOpen ? 'closed' : 'open');
        menuButton.setAttribute('aria-expanded', isOpen ? 'false' : 'true');
      });
      menuButton.dataset.menuButtonInitialized = 'true';
    }

    // Initialize link click handlers to close menu on navigation
    if (mobileMenu && menuButton && !mobileMenu.dataset.menuLinksInitialized) {
      mobileMenu.querySelectorAll('a').forEach(link => {
        link.addEventListener('click', () => {
          mobileMenu.setAttribute('data-state', 'closed');
          menuButton.setAttribute('aria-expanded', 'false');
        });
      });
      mobileMenu.dataset.menuLinksInitialized = 'true';
    }
  }

  // Run on initial page load
  setupMobileMenu();
  updateActiveNav();

  // Run after view transitions
  document.addEventListener('astro:after-swap', () => {
    setupMobileMenu();
    updateActiveNav();
  });
  document.addEventListener('astro:page-load', updateActiveNav);
</script>

<style>
  nav {
    backdrop-filter: blur(4px);
    height: 2.25rem; /* 36px */
    background-color: rgba(var(--main-content-bg-rgb), 0.85);
    border-top: 1px solid var(--divider-shadow-dark);
    border-bottom: 1px solid var(--divider-shadow-dark);
  }

  a {
    color: var(--nav-text-color);
    background-color: transparent;
  }

  html:not(.dark) a {
    color: var(--text-color);
  }

  html.dark a {
    color: var(--text-color);
  }

  a:hover {
  }

  #mobile-menu[data-state="closed"] {
    opacity: 0;
    transform: translateY(0.5rem);
    pointer-events: none;
  }

  #mobile-menu[data-state="open"] {
    opacity: 1;
    transform: translateY(0);
    pointer-events: auto;
  }
</style>
